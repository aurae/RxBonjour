apply plugin: "java-library"
apply plugin: "kotlin"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

dependencies {
    // @formatter:off
    api project(":rxbonjour")
    implementation ("org.jmdns:jmdns:$JMDNS_JAR_VERSION") {
        exclude group: "org.slf4j"
    }
    implementation "org.slf4j:slf4j-nop:$SLF4J_VERSION"

    testCompile "junit:junit:$JUNIT_VERSION"                                    // Unit Testing
    testCompile "org.mockito:mockito-core:$MOCKITO_VERSION"                     // Mocking Framework
    testCompile "org.powermock:powermock-api-mockito:$POWERMOCK_VERSION"        // Mocking Framework extensions
    testCompile "org.powermock:powermock-module-junit4:$POWERMOCK_VERSION"      // Mocking Framework extensions
    // @formatter:on
}

// ------------------------------------------------------------------------------------------------
// Deployment Setup
// ------------------------------------------------------------------------------------------------

group = GROUP_ID
version = VERSION_NAME
ext.artifact = "$ARTIFACT_ID-driver-jmdns"

// Include sources.jar archive in each release
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Include javadoc.jar archive in each release
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name LICENSE_NAME
            url LICENSE_URL
            distribution "repo"
        }
    }
    developers {
        developer {
            id DEVELOPER_ID
            name DEVELOPER_NAME
            email DEVELOPER_EMAIL
        }
    }

    scm {
        url WEB_URL
    }
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId GROUP_ID
            artifactId project.ext.artifact
            version VERSION_NAME
            pom.withXml {
                def root = asNode()
                root.appendNode("description", DESCRIPTION)
                root.appendNode("name", project.ext.artifact)
                root.appendNode("url", WEB_URL)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.ext.bintrayUser
    key = project.ext.bintrayKey
    publications = ["library"]
    dryRun = false

    pkg {
        repo = "maven"
        name = LIBRARY_NAME
        userOrg = project.ext.bintrayUser
        licenses = [LICENSE_ID]
        vcsUrl = GIT_URL
        websiteUrl = WEB_URL
        publish = true
    }
}
